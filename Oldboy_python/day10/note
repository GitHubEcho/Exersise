进程：
最小调度单元的集合
线程：
指令集合


python多线程的是现实通过CPU的上下文切换实现的，感觉手上是多线程，其实是单线程

io操作不占用cpu，计算不占用cpu

python的多线程不适合CPU密集型的操作，适合I/O密集型的任务

1.多进程
    每个进程都是父进程启动的
2.进程共享数据的几种方法
    Queue     用pickle的模块复制了一份数据给其他进程
    Pipe      类似套接字之间的通信
    Manage   manage类里有可实现进程间通信的数据结构
3.进程池

4.进程锁

5.协程
协程的好处：
无需线程上下文切换的开销
无需原子操作锁定及同步的开销
　　"原子操作(atomic operation)是不需要synchronized"，所谓原子操作是指不会被线程调度机制打断的操作；这种操作一旦开始，就一直运行到结束，中间不会有任何 context switch （切换到另一个线程）。原子操作可以是一个步骤，也可以是多个操作步骤，但是其顺序是不可以被打乱，或者切割掉只执行部分。视作整体是原子性的核心。
方便切换控制流，简化编程模型
高并发+高扩展性+低成本：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理。


I/O操作就切换


gevent   自动切换
greenlet 手动切换


asynchronous 异步
Synchronize  同步
